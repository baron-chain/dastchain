// Generated by Ignite ignite.com/cli
import { SigningStargateClient } from "@cosmjs/stargate";
import { Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { Api } from "./rest";
import { QueryIncentivizedPacketRequest } from "./types/ibc/applications/fee/v1/query";
import { QueryIncentivizedPacketsForChannelRequest } from "./types/ibc/applications/fee/v1/query";
import { MsgRegisterPayee } from "./types/ibc/applications/fee/v1/tx";
import { MsgRegisterCounterpartyPayeeResponse } from "./types/ibc/applications/fee/v1/tx";
import { MsgPayPacketFeeResponse } from "./types/ibc/applications/fee/v1/tx";
import { PacketFee } from "./types/ibc/applications/fee/v1/fee";
import { QueryPayeeRequest } from "./types/ibc/applications/fee/v1/query";
import { QueryFeeEnabledChannelsResponse } from "./types/ibc/applications/fee/v1/query";
import { QueryFeeEnabledChannelRequest } from "./types/ibc/applications/fee/v1/query";
import { MsgRegisterPayeeResponse } from "./types/ibc/applications/fee/v1/tx";
import { QueryIncentivizedPacketResponse } from "./types/ibc/applications/fee/v1/query";
import { MsgRegisterCounterpartyPayee } from "./types/ibc/applications/fee/v1/tx";
import { RegisteredPayee } from "./types/ibc/applications/fee/v1/genesis";
import { IncentivizedAcknowledgement } from "./types/ibc/applications/fee/v1/ack";
import { IdentifiedPacketFees } from "./types/ibc/applications/fee/v1/fee";
import { QueryIncentivizedPacketsResponse } from "./types/ibc/applications/fee/v1/query";
import { QueryCounterpartyPayeeRequest } from "./types/ibc/applications/fee/v1/query";
import { QueryFeeEnabledChannelsRequest } from "./types/ibc/applications/fee/v1/query";
import { MsgPayPacketFee } from "./types/ibc/applications/fee/v1/tx";
import { RegisteredCounterpartyPayee } from "./types/ibc/applications/fee/v1/genesis";
import { ForwardRelayerAddress } from "./types/ibc/applications/fee/v1/genesis";
import { QueryTotalAckFeesRequest } from "./types/ibc/applications/fee/v1/query";
import { MsgPayPacketFeeAsync } from "./types/ibc/applications/fee/v1/tx";
import { MsgPayPacketFeeAsyncResponse } from "./types/ibc/applications/fee/v1/tx";
import { Metadata } from "./types/ibc/applications/fee/v1/metadata";
import { QueryTotalTimeoutFeesResponse } from "./types/ibc/applications/fee/v1/query";
import { QueryCounterpartyPayeeResponse } from "./types/ibc/applications/fee/v1/query";
import { QueryFeeEnabledChannelResponse } from "./types/ibc/applications/fee/v1/query";
import { GenesisState } from "./types/ibc/applications/fee/v1/genesis";
import { PacketFees } from "./types/ibc/applications/fee/v1/fee";
import { QueryIncentivizedPacketsRequest } from "./types/ibc/applications/fee/v1/query";
import { QueryIncentivizedPacketsForChannelResponse } from "./types/ibc/applications/fee/v1/query";
import { QueryPayeeResponse } from "./types/ibc/applications/fee/v1/query";
import { FeeEnabledChannel } from "./types/ibc/applications/fee/v1/genesis";
import { Fee } from "./types/ibc/applications/fee/v1/fee";
import { QueryTotalRecvFeesRequest } from "./types/ibc/applications/fee/v1/query";
import { QueryTotalRecvFeesResponse } from "./types/ibc/applications/fee/v1/query";
import { QueryTotalAckFeesResponse } from "./types/ibc/applications/fee/v1/query";
import { QueryTotalTimeoutFeesRequest } from "./types/ibc/applications/fee/v1/query";
export { QueryIncentivizedPacketRequest, QueryIncentivizedPacketsForChannelRequest, MsgRegisterPayee, MsgRegisterCounterpartyPayeeResponse, MsgPayPacketFeeResponse, PacketFee, QueryPayeeRequest, QueryFeeEnabledChannelsResponse, QueryFeeEnabledChannelRequest, MsgRegisterPayeeResponse, QueryIncentivizedPacketResponse, MsgRegisterCounterpartyPayee, RegisteredPayee, IncentivizedAcknowledgement, IdentifiedPacketFees, QueryIncentivizedPacketsResponse, QueryCounterpartyPayeeRequest, QueryFeeEnabledChannelsRequest, MsgPayPacketFee, RegisteredCounterpartyPayee, ForwardRelayerAddress, QueryTotalAckFeesRequest, MsgPayPacketFeeAsync, MsgPayPacketFeeAsyncResponse, Metadata, QueryTotalTimeoutFeesResponse, QueryCounterpartyPayeeResponse, QueryFeeEnabledChannelResponse, GenesisState, PacketFees, QueryIncentivizedPacketsRequest, QueryIncentivizedPacketsForChannelResponse, QueryPayeeResponse, FeeEnabledChannel, Fee, QueryTotalRecvFeesRequest, QueryTotalRecvFeesResponse, QueryTotalAckFeesResponse, QueryTotalTimeoutFeesRequest };
export const registry = new Registry(msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
export const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendQueryIncentivizedPacketRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryIncentivizedPacketRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryIncentivizedPacketRequest({ value: QueryIncentivizedPacketRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryIncentivizedPacketRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryIncentivizedPacketsForChannelRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryIncentivizedPacketsForChannelRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryIncentivizedPacketsForChannelRequest({ value: QueryIncentivizedPacketsForChannelRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryIncentivizedPacketsForChannelRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRegisterPayee({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRegisterPayee: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgRegisterPayee({ value: MsgRegisterPayee.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRegisterPayee: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRegisterCounterpartyPayeeResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRegisterCounterpartyPayeeResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgRegisterCounterpartyPayeeResponse({ value: MsgRegisterCounterpartyPayeeResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRegisterCounterpartyPayeeResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgPayPacketFeeResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgPayPacketFeeResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgPayPacketFeeResponse({ value: MsgPayPacketFeeResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgPayPacketFeeResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendPacketFee({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendPacketFee: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.packetFee({ value: PacketFee.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendPacketFee: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryPayeeRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryPayeeRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryPayeeRequest({ value: QueryPayeeRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryPayeeRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryFeeEnabledChannelsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryFeeEnabledChannelsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryFeeEnabledChannelsResponse({ value: QueryFeeEnabledChannelsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryFeeEnabledChannelsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryFeeEnabledChannelRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryFeeEnabledChannelRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryFeeEnabledChannelRequest({ value: QueryFeeEnabledChannelRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryFeeEnabledChannelRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRegisterPayeeResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRegisterPayeeResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgRegisterPayeeResponse({ value: MsgRegisterPayeeResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRegisterPayeeResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryIncentivizedPacketResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryIncentivizedPacketResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryIncentivizedPacketResponse({ value: QueryIncentivizedPacketResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryIncentivizedPacketResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRegisterCounterpartyPayee({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRegisterCounterpartyPayee: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgRegisterCounterpartyPayee({ value: MsgRegisterCounterpartyPayee.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRegisterCounterpartyPayee: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendRegisteredPayee({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendRegisteredPayee: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.registeredPayee({ value: RegisteredPayee.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendRegisteredPayee: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendIncentivizedAcknowledgement({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendIncentivizedAcknowledgement: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.incentivizedAcknowledgement({ value: IncentivizedAcknowledgement.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendIncentivizedAcknowledgement: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendIdentifiedPacketFees({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendIdentifiedPacketFees: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.identifiedPacketFees({ value: IdentifiedPacketFees.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendIdentifiedPacketFees: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryIncentivizedPacketsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryIncentivizedPacketsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryIncentivizedPacketsResponse({ value: QueryIncentivizedPacketsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryIncentivizedPacketsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryCounterpartyPayeeRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryCounterpartyPayeeRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryCounterpartyPayeeRequest({ value: QueryCounterpartyPayeeRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryCounterpartyPayeeRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryFeeEnabledChannelsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryFeeEnabledChannelsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryFeeEnabledChannelsRequest({ value: QueryFeeEnabledChannelsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryFeeEnabledChannelsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgPayPacketFee({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgPayPacketFee: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgPayPacketFee({ value: MsgPayPacketFee.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgPayPacketFee: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendRegisteredCounterpartyPayee({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendRegisteredCounterpartyPayee: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.registeredCounterpartyPayee({ value: RegisteredCounterpartyPayee.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendRegisteredCounterpartyPayee: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendForwardRelayerAddress({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendForwardRelayerAddress: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.forwardRelayerAddress({ value: ForwardRelayerAddress.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendForwardRelayerAddress: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryTotalAckFeesRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryTotalAckFeesRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryTotalAckFeesRequest({ value: QueryTotalAckFeesRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryTotalAckFeesRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgPayPacketFeeAsync({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgPayPacketFeeAsync: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgPayPacketFeeAsync({ value: MsgPayPacketFeeAsync.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgPayPacketFeeAsync: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgPayPacketFeeAsyncResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgPayPacketFeeAsyncResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgPayPacketFeeAsyncResponse({ value: MsgPayPacketFeeAsyncResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgPayPacketFeeAsyncResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMetadata({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMetadata: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.metadata({ value: Metadata.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMetadata: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryTotalTimeoutFeesResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryTotalTimeoutFeesResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryTotalTimeoutFeesResponse({ value: QueryTotalTimeoutFeesResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryTotalTimeoutFeesResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryCounterpartyPayeeResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryCounterpartyPayeeResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryCounterpartyPayeeResponse({ value: QueryCounterpartyPayeeResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryCounterpartyPayeeResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryFeeEnabledChannelResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryFeeEnabledChannelResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryFeeEnabledChannelResponse({ value: QueryFeeEnabledChannelResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryFeeEnabledChannelResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGenesisState({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.genesisState({ value: GenesisState.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendPacketFees({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendPacketFees: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.packetFees({ value: PacketFees.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendPacketFees: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryIncentivizedPacketsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryIncentivizedPacketsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryIncentivizedPacketsRequest({ value: QueryIncentivizedPacketsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryIncentivizedPacketsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryIncentivizedPacketsForChannelResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryIncentivizedPacketsForChannelResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryIncentivizedPacketsForChannelResponse({ value: QueryIncentivizedPacketsForChannelResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryIncentivizedPacketsForChannelResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryPayeeResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryPayeeResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryPayeeResponse({ value: QueryPayeeResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryPayeeResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendFeeEnabledChannel({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendFeeEnabledChannel: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.feeEnabledChannel({ value: FeeEnabledChannel.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendFeeEnabledChannel: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendFee({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendFee: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.fee({ value: Fee.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendFee: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryTotalRecvFeesRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryTotalRecvFeesRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryTotalRecvFeesRequest({ value: QueryTotalRecvFeesRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryTotalRecvFeesRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryTotalRecvFeesResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryTotalRecvFeesResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryTotalRecvFeesResponse({ value: QueryTotalRecvFeesResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryTotalRecvFeesResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryTotalAckFeesResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryTotalAckFeesResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryTotalAckFeesResponse({ value: QueryTotalAckFeesResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryTotalAckFeesResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryTotalTimeoutFeesRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryTotalTimeoutFeesRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryTotalTimeoutFeesRequest({ value: QueryTotalTimeoutFeesRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryTotalTimeoutFeesRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        queryIncentivizedPacketRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryIncentivizedPacketRequest", value: QueryIncentivizedPacketRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryIncentivizedPacketRequest: Could not create message: ' + e.message);
            }
        },
        queryIncentivizedPacketsForChannelRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest", value: QueryIncentivizedPacketsForChannelRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryIncentivizedPacketsForChannelRequest: Could not create message: ' + e.message);
            }
        },
        msgRegisterPayee({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.MsgRegisterPayee", value: MsgRegisterPayee.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRegisterPayee: Could not create message: ' + e.message);
            }
        },
        msgRegisterCounterpartyPayeeResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse", value: MsgRegisterCounterpartyPayeeResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRegisterCounterpartyPayeeResponse: Could not create message: ' + e.message);
            }
        },
        msgPayPacketFeeResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.MsgPayPacketFeeResponse", value: MsgPayPacketFeeResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgPayPacketFeeResponse: Could not create message: ' + e.message);
            }
        },
        packetFee({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.PacketFee", value: PacketFee.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:PacketFee: Could not create message: ' + e.message);
            }
        },
        queryPayeeRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryPayeeRequest", value: QueryPayeeRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryPayeeRequest: Could not create message: ' + e.message);
            }
        },
        queryFeeEnabledChannelsResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse", value: QueryFeeEnabledChannelsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryFeeEnabledChannelsResponse: Could not create message: ' + e.message);
            }
        },
        queryFeeEnabledChannelRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryFeeEnabledChannelRequest", value: QueryFeeEnabledChannelRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryFeeEnabledChannelRequest: Could not create message: ' + e.message);
            }
        },
        msgRegisterPayeeResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.MsgRegisterPayeeResponse", value: MsgRegisterPayeeResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRegisterPayeeResponse: Could not create message: ' + e.message);
            }
        },
        queryIncentivizedPacketResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryIncentivizedPacketResponse", value: QueryIncentivizedPacketResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryIncentivizedPacketResponse: Could not create message: ' + e.message);
            }
        },
        msgRegisterCounterpartyPayee({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.MsgRegisterCounterpartyPayee", value: MsgRegisterCounterpartyPayee.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRegisterCounterpartyPayee: Could not create message: ' + e.message);
            }
        },
        registeredPayee({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.RegisteredPayee", value: RegisteredPayee.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:RegisteredPayee: Could not create message: ' + e.message);
            }
        },
        incentivizedAcknowledgement({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.IncentivizedAcknowledgement", value: IncentivizedAcknowledgement.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:IncentivizedAcknowledgement: Could not create message: ' + e.message);
            }
        },
        identifiedPacketFees({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.IdentifiedPacketFees", value: IdentifiedPacketFees.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:IdentifiedPacketFees: Could not create message: ' + e.message);
            }
        },
        queryIncentivizedPacketsResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryIncentivizedPacketsResponse", value: QueryIncentivizedPacketsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryIncentivizedPacketsResponse: Could not create message: ' + e.message);
            }
        },
        queryCounterpartyPayeeRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryCounterpartyPayeeRequest", value: QueryCounterpartyPayeeRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryCounterpartyPayeeRequest: Could not create message: ' + e.message);
            }
        },
        queryFeeEnabledChannelsRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest", value: QueryFeeEnabledChannelsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryFeeEnabledChannelsRequest: Could not create message: ' + e.message);
            }
        },
        msgPayPacketFee({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.MsgPayPacketFee", value: MsgPayPacketFee.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgPayPacketFee: Could not create message: ' + e.message);
            }
        },
        registeredCounterpartyPayee({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.RegisteredCounterpartyPayee", value: RegisteredCounterpartyPayee.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:RegisteredCounterpartyPayee: Could not create message: ' + e.message);
            }
        },
        forwardRelayerAddress({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.ForwardRelayerAddress", value: ForwardRelayerAddress.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ForwardRelayerAddress: Could not create message: ' + e.message);
            }
        },
        queryTotalAckFeesRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryTotalAckFeesRequest", value: QueryTotalAckFeesRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryTotalAckFeesRequest: Could not create message: ' + e.message);
            }
        },
        msgPayPacketFeeAsync({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.MsgPayPacketFeeAsync", value: MsgPayPacketFeeAsync.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgPayPacketFeeAsync: Could not create message: ' + e.message);
            }
        },
        msgPayPacketFeeAsyncResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse", value: MsgPayPacketFeeAsyncResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgPayPacketFeeAsyncResponse: Could not create message: ' + e.message);
            }
        },
        metadata({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.Metadata", value: Metadata.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Metadata: Could not create message: ' + e.message);
            }
        },
        queryTotalTimeoutFeesResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse", value: QueryTotalTimeoutFeesResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryTotalTimeoutFeesResponse: Could not create message: ' + e.message);
            }
        },
        queryCounterpartyPayeeResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryCounterpartyPayeeResponse", value: QueryCounterpartyPayeeResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryCounterpartyPayeeResponse: Could not create message: ' + e.message);
            }
        },
        queryFeeEnabledChannelResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryFeeEnabledChannelResponse", value: QueryFeeEnabledChannelResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryFeeEnabledChannelResponse: Could not create message: ' + e.message);
            }
        },
        genesisState({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.GenesisState", value: GenesisState.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GenesisState: Could not create message: ' + e.message);
            }
        },
        packetFees({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.PacketFees", value: PacketFees.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:PacketFees: Could not create message: ' + e.message);
            }
        },
        queryIncentivizedPacketsRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryIncentivizedPacketsRequest", value: QueryIncentivizedPacketsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryIncentivizedPacketsRequest: Could not create message: ' + e.message);
            }
        },
        queryIncentivizedPacketsForChannelResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse", value: QueryIncentivizedPacketsForChannelResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryIncentivizedPacketsForChannelResponse: Could not create message: ' + e.message);
            }
        },
        queryPayeeResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryPayeeResponse", value: QueryPayeeResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryPayeeResponse: Could not create message: ' + e.message);
            }
        },
        feeEnabledChannel({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.FeeEnabledChannel", value: FeeEnabledChannel.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:FeeEnabledChannel: Could not create message: ' + e.message);
            }
        },
        fee({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.Fee", value: Fee.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Fee: Could not create message: ' + e.message);
            }
        },
        queryTotalRecvFeesRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryTotalRecvFeesRequest", value: QueryTotalRecvFeesRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryTotalRecvFeesRequest: Could not create message: ' + e.message);
            }
        },
        queryTotalRecvFeesResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryTotalRecvFeesResponse", value: QueryTotalRecvFeesResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryTotalRecvFeesResponse: Could not create message: ' + e.message);
            }
        },
        queryTotalAckFeesResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryTotalAckFeesResponse", value: QueryTotalAckFeesResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryTotalAckFeesResponse: Could not create message: ' + e.message);
            }
        },
        queryTotalTimeoutFeesRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest", value: QueryTotalTimeoutFeesRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryTotalTimeoutFeesRequest: Could not create message: ' + e.message);
            }
        },
    };
};
export const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new Api({ baseURL: addr });
};
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = queryClient({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {};
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = txClient({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            IbcApplicationsFeeV1: new SDKModule(test)
        },
        registry: msgTypes
    };
};
export default IgntModule;
