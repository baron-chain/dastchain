// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { QueryParamsRequest } from "./types/dastchain/tokenfactory/query";
import { MsgCreateDenom } from "./types/dastchain/tokenfactory/tx";
import { MsgUpdateDenomResponse } from "./types/dastchain/tokenfactory/tx";
import { MsgUpdateDenom } from "./types/dastchain/tokenfactory/tx";
import { QueryParamsResponse } from "./types/dastchain/tokenfactory/query";
import { QueryGetDenomResponse } from "./types/dastchain/tokenfactory/query";
import { Params } from "./types/dastchain/tokenfactory/params";
import { MsgUpdateParams } from "./types/dastchain/tokenfactory/tx";
import { GenesisState } from "./types/dastchain/tokenfactory/genesis";
import { MsgCreateDenomResponse } from "./types/dastchain/tokenfactory/tx";
import { QueryGetDenomRequest } from "./types/dastchain/tokenfactory/query";
import { QueryAllDenomRequest } from "./types/dastchain/tokenfactory/query";
import { QueryAllDenomResponse } from "./types/dastchain/tokenfactory/query";
import { Denom } from "./types/dastchain/tokenfactory/denom";
import { MsgUpdateParamsResponse } from "./types/dastchain/tokenfactory/tx";


export { QueryParamsRequest, MsgCreateDenom, MsgUpdateDenomResponse, MsgUpdateDenom, QueryParamsResponse, QueryGetDenomResponse, Params, MsgUpdateParams, GenesisState, MsgCreateDenomResponse, QueryGetDenomRequest, QueryAllDenomRequest, QueryAllDenomResponse, Denom, MsgUpdateParamsResponse };

type sendQueryParamsRequestParams = {
  value: QueryParamsRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateDenomParams = {
  value: MsgCreateDenom,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateDenomResponseParams = {
  value: MsgUpdateDenomResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateDenomParams = {
  value: MsgUpdateDenom,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsResponseParams = {
  value: QueryParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetDenomResponseParams = {
  value: QueryGetDenomResponse,
  fee?: StdFee,
  memo?: string
};

type sendParamsParams = {
  value: Params,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsParams = {
  value: MsgUpdateParams,
  fee?: StdFee,
  memo?: string
};

type sendGenesisStateParams = {
  value: GenesisState,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateDenomResponseParams = {
  value: MsgCreateDenomResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetDenomRequestParams = {
  value: QueryGetDenomRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllDenomRequestParams = {
  value: QueryAllDenomRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllDenomResponseParams = {
  value: QueryAllDenomResponse,
  fee?: StdFee,
  memo?: string
};

type sendDenomParams = {
  value: Denom,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
  fee?: StdFee,
  memo?: string
};


type queryParamsRequestParams = {
  value: QueryParamsRequest,
};

type msgCreateDenomParams = {
  value: MsgCreateDenom,
};

type msgUpdateDenomResponseParams = {
  value: MsgUpdateDenomResponse,
};

type msgUpdateDenomParams = {
  value: MsgUpdateDenom,
};

type queryParamsResponseParams = {
  value: QueryParamsResponse,
};

type queryGetDenomResponseParams = {
  value: QueryGetDenomResponse,
};

type paramsParams = {
  value: Params,
};

type msgUpdateParamsParams = {
  value: MsgUpdateParams,
};

type genesisStateParams = {
  value: GenesisState,
};

type msgCreateDenomResponseParams = {
  value: MsgCreateDenomResponse,
};

type queryGetDenomRequestParams = {
  value: QueryGetDenomRequest,
};

type queryAllDenomRequestParams = {
  value: QueryAllDenomRequest,
};

type queryAllDenomResponseParams = {
  value: QueryAllDenomResponse,
};

type denomParams = {
  value: Denom,
};

type msgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendQueryParamsRequest({ value, fee, memo }: sendQueryParamsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsRequest({ value: QueryParamsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateDenom({ value, fee, memo }: sendMsgCreateDenomParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateDenom: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateDenom({ value: MsgCreateDenom.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateDenom: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateDenomResponse({ value, fee, memo }: sendMsgUpdateDenomResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateDenomResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateDenomResponse({ value: MsgUpdateDenomResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateDenomResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateDenom({ value, fee, memo }: sendMsgUpdateDenomParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateDenom: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateDenom({ value: MsgUpdateDenom.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateDenom: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsResponse({ value, fee, memo }: sendQueryParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsResponse({ value: QueryParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetDenomResponse({ value, fee, memo }: sendQueryGetDenomResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetDenomResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetDenomResponse({ value: QueryGetDenomResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetDenomResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendParams({ value, fee, memo }: sendParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.params({ value: Params.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParams({ value, fee, memo }: sendMsgUpdateParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendGenesisState({ value, fee, memo }: sendGenesisStateParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.genesisState({ value: GenesisState.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateDenomResponse({ value, fee, memo }: sendMsgCreateDenomResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateDenomResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateDenomResponse({ value: MsgCreateDenomResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateDenomResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetDenomRequest({ value, fee, memo }: sendQueryGetDenomRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetDenomRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetDenomRequest({ value: QueryGetDenomRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetDenomRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllDenomRequest({ value, fee, memo }: sendQueryAllDenomRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllDenomRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllDenomRequest({ value: QueryAllDenomRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllDenomRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllDenomResponse({ value, fee, memo }: sendQueryAllDenomResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllDenomResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllDenomResponse({ value: QueryAllDenomResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllDenomResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendDenom({ value, fee, memo }: sendDenomParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendDenom: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.denom({ value: Denom.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendDenom: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParamsResponse({ value, fee, memo }: sendMsgUpdateParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParamsResponse({ value: MsgUpdateParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		queryParamsRequest({ value }: queryParamsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/dastchain.tokenfactory.QueryParamsRequest", value: QueryParamsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message)
			}
		},
		
		msgCreateDenom({ value }: msgCreateDenomParams): EncodeObject {
			try {
				return { typeUrl: "/dastchain.tokenfactory.MsgCreateDenom", value: MsgCreateDenom.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateDenom: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateDenomResponse({ value }: msgUpdateDenomResponseParams): EncodeObject {
			try {
				return { typeUrl: "/dastchain.tokenfactory.MsgUpdateDenomResponse", value: MsgUpdateDenomResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateDenomResponse: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateDenom({ value }: msgUpdateDenomParams): EncodeObject {
			try {
				return { typeUrl: "/dastchain.tokenfactory.MsgUpdateDenom", value: MsgUpdateDenom.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateDenom: Could not create message: ' + e.message)
			}
		},
		
		queryParamsResponse({ value }: queryParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/dastchain.tokenfactory.QueryParamsResponse", value: QueryParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetDenomResponse({ value }: queryGetDenomResponseParams): EncodeObject {
			try {
				return { typeUrl: "/dastchain.tokenfactory.QueryGetDenomResponse", value: QueryGetDenomResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetDenomResponse: Could not create message: ' + e.message)
			}
		},
		
		params({ value }: paramsParams): EncodeObject {
			try {
				return { typeUrl: "/dastchain.tokenfactory.Params", value: Params.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Params: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParams({ value }: msgUpdateParamsParams): EncodeObject {
			try {
				return { typeUrl: "/dastchain.tokenfactory.MsgUpdateParams", value: MsgUpdateParams.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message)
			}
		},
		
		genesisState({ value }: genesisStateParams): EncodeObject {
			try {
				return { typeUrl: "/dastchain.tokenfactory.GenesisState", value: GenesisState.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:GenesisState: Could not create message: ' + e.message)
			}
		},
		
		msgCreateDenomResponse({ value }: msgCreateDenomResponseParams): EncodeObject {
			try {
				return { typeUrl: "/dastchain.tokenfactory.MsgCreateDenomResponse", value: MsgCreateDenomResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateDenomResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetDenomRequest({ value }: queryGetDenomRequestParams): EncodeObject {
			try {
				return { typeUrl: "/dastchain.tokenfactory.QueryGetDenomRequest", value: QueryGetDenomRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetDenomRequest: Could not create message: ' + e.message)
			}
		},
		
		queryAllDenomRequest({ value }: queryAllDenomRequestParams): EncodeObject {
			try {
				return { typeUrl: "/dastchain.tokenfactory.QueryAllDenomRequest", value: QueryAllDenomRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllDenomRequest: Could not create message: ' + e.message)
			}
		},
		
		queryAllDenomResponse({ value }: queryAllDenomResponseParams): EncodeObject {
			try {
				return { typeUrl: "/dastchain.tokenfactory.QueryAllDenomResponse", value: QueryAllDenomResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllDenomResponse: Could not create message: ' + e.message)
			}
		},
		
		denom({ value }: denomParams): EncodeObject {
			try {
				return { typeUrl: "/dastchain.tokenfactory.Denom", value: Denom.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Denom: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParamsResponse({ value }: msgUpdateParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/dastchain.tokenfactory.MsgUpdateParamsResponse", value: MsgUpdateParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			DastchainTokenfactory: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;